from pprint import pprint

import elgas.parameters.analog_quantity
import elgas.parameters.binary
import elgas.parameters.compressibility
import elgas.parameters.conversion_coefficient
import elgas.parameters.counter
import elgas.parameters.diagnostics
import elgas.parameters.error_counter
import elgas.parameters.error_standard_counter
import elgas.parameters.flow_rate
import elgas.parameters.modem
import elgas.parameters.setpoint
import elgas.parameters.standard_counter
import elgas.parameters.system_parameters
import elgas.parameters.time_window
from elgas import parameters
from elgas.application import ReadDeviceParametersResponse


def test_parameter_0():
    response = ReadDeviceParametersResponse(
        data=bytearray(
            b"\x0e\x01\x00\x83]!\xffs1.16\x00\x10\x02211137_000000001\x00\x0cF\x13\x1e\x10\x0ef\xa6\xcaB\x00\x00\x00\x00\x02\xcd\xcc\x8c?\xb3\x0cA?5\xde.B\n\xd7#?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x18\xc4B\x8a\x1fC?\xd5\t\x88>\x84\x9eM=\xac\x8b[=\xc6\xdc5<\x00o\x01<\n\xd7#<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00X\x00\x0e\x00H\x004\x00\x98\x02X\x00\x00\x00\x03\x00\x00\x08\x00\x02\x03\x03\x00\x08\x03\x00\x06h\xa6\xcaB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x07bar\x00\x00\x00\x00\x00 \xb0C\x00\x00\x00\x00\x00\x00\xa1m\x00\x00\x00\x00\x00\x00\x00\x90MJ/m3\x003\x00\x01\x01\x00\x00\x00\x00\x00A\x005\xe0\xff\x7f\xffw\xee\x12\x00\x00\x00\x00\x00\x00\x00\x00\x001.16\x00\x9a\xfa\x00\x00\x00\x00\xe5!\x00\x00K\x00\x1e\x00\x00\x01\x00\x06\x00\n\x00\x9bPressure p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00bar\x00\x00\x00\x00\x00\x9a\x00\x9a:\x00\x00\x00\x00\xcd\xccL?\x00\x00\x8cBNy\x87d\x9e\x02Z\x00\x00\x00\n\x00\x00\x00\x00\x00K\x00\x1e\x01\x00\x02\x00\x08\x00\x0c\x00\x9bTemperature t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0C\x00\x00\x00\x00\x00\x00\x96\x00\x16;\x00\x00H\xc2\x00\x00\xc8\xc1\x00\x00pB\xadTad\xa2\x02\\\x00\x00\x00\x0c\x00\x00\x00\x00\x00K\x00\x1e\x02\x00\x15\x00\n\x00\x0e\x00\x89Internal temp. A3\x00\x00\x00\x00\x00\x00\xb0C\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x00\x00\x00\xc3\x00\x00 \xc2\x00\x00\xaaB\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00K\x00\x1e\x03\x00\x16\x00\x0c\x00\x10\x00\x89Battery voltage A4\x00\x00\x00\x00\x00V\x00\x00\x00\x00\x00\x00\x00h\xe8\x9f;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90@\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00K\x00\x1e\x04\x00\x17\x00\x0e\x00\x12\x00\x81Battery capacity A5\x00\x00\x00\x00%\x00\x00\x00\x00\x00\x00\x00\xc8\x00\xc8:\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8B\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00K\x00\x1e\x05\x00\x1a\x00\x10\x00\x14\x00\x81GSM signal A6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x00\x00\x00\x00\xc8\x00\xc8:\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8B\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00F\x00\x1f\x00\x00\xa0\x00\x90\x02\x00\x00P\x00\x81Cover B1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00      Closed\x00      Opened\x00K\x000\x01\x00\x1e\x00\x91\x02\x00\x00Q\x00QCall window B2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01!\x00\xb8V\x00\x00\x00\x00\x00\x00\x04     no call\x00      active\x00K\x000\x02\x00\x1f\x00\x92\x02\x00\x00R\x00IService window B3\x00\x00\x00\x00\x00\x00\x01A\x00\x00\x00\x00\x00\x08Q\x01\x00\x00  no service\x00      active\x00F\x00\x1f\x03\x00\x1c\x00\x93\x02\x00\x00S\x00\xc1Modem power supp B4\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00         Off\x00          On\x00"
        ),
        object_number=0,
        object_amount=11,
        is_end=False,
    )
    object_length = int.from_bytes(response.data[:2], "little")
    object_id = response.data[2]
    assert object_length == 270
    assert object_id == 0

    object_data = response.data[3:270]
    print(object_data)
    assert len(object_data) == 270 - 3

    system_parameters = elgas.parameters.system_parameters.SystemParameters.from_bytes(
        object_data
    )

    print(system_parameters)
    assert False


def test_parameter_type_30():
    data = bytearray(
        b"\x00\x00\x01\x00\x06\x00\n\x00\x9bPressure p\x00G\x00\x00\x00\x00\x00\x00+++\x00\x00bar\x00\x00\x00\x00\x00\x9a\x00\x9a:\x00\x00\x00\x00\xcd\xccL?\x00\x00\x8cBNy\x87d\x9e\x02Z\x00\x00\x00\n\x00\x00\x00\x00\x02"
    )
    data2 = bytearray(
        b"\x01\x00\x02\x00\x08\x00\x0c\x00\x9bTemperature t\x00. Vbs\x00}?}\xb0C\x00\x00\x00\x00\x00\x00\x96\x00\x16;\x00\x00H\xc2\x00\x00\xc8\xc1\x00\x00pB\xadTad\xa2\x02\\\x00\x00\x00\x0c\x00\x00\x00\x00A"
    )
    data3 = bytearray(
        b"\x02\x00\x15\x00\n\x00\x0e\x00\x89Internal temp. A3\x002\x00#\x00\x00\xb0C\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x00\x00\x00\xc3\x00\x00 \xc2\x00\x00\xaaB\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    )
    data4 = bytearray(
        b"\x03\x00\x16\x00\x0c\x00\x10\x00\x89Battery voltage A4\x00ax SV\x00\x00\x00\x00\x00\x00\x00h\xe8\x9f;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90@\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    )
    data5 = bytearray(
        b"\x04\x00\x17\x00\x0e\x00\x12\x00\x81Battery capacity A5\x00\x00\x00\x00%\x00\x00\x00\x00\x00\x00\x00\xc8\x00\xc8:\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8B\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00a"
    )
    data6 = bytearray(
        b"\x05\x00\x1a\x00\x10\x00\x14\x00\x81GSM signal A6\x00&\x00B\x00F\x00\x91Co%\x00\x00\x00\x00\x00\x00\x00\xc8\x00\xc8:\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8B\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00B"
    )
    all_data = [data, data2, data3, data4, data5, data6]
    print(all_data)
    analog = elgas.parameters.analog_quantity.AnalogQuantity.from_bytes(data2)
    print(analog)


def test_analog_to_json():
    data2 = bytearray(
        b"\x01\x00\x02\x00\x08\x00\x0c\x00\x9bTemperature t\x00. Vbs\x00}?}\xb0C\x00\x00\x00\x00\x00\x00\x96\x00\x16;\x00\x00H\xc2\x00\x00\xc8\xc1\x00\x00pB\xadTad\xa2\x02\\\x00\x00\x00\x0c\x00\x00\x00\x00A"
    )
    analog = elgas.parameters.analog_quantity.AnalogQuantity.from_bytes(data2)
    json_data = analog.to_json()
    pprint(json_data)


def test_parameter_type_31():

    data1 = bytearray(
        b"\x00\x00\xa0\x00\x90\x02\x00\x00P\x00\x81Cover B1\x00\x00\x00\x00\x00\x04B\x00;\x00\x00'\x00J\x00\x9c\x02\x00\x00\x00\x00\x00      Closed\x00      Opened\x00"
    )
    # data2 = bytearray(
    #     b"\x03\x00\x1c\x00\x93\x02\x00\x00S\x00\xc1Modem power supp B4\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00\x00         Off\x00          On\x00"
    # )
    # data3 = bytearray(
    #     b'\x04\x00\x1b\x00\x94\x02\x00\x00T\x00\xc1External power B5\x00 \x9c}"}\x9c\x02\x00\x00\x00\x00\x00    Power OK\x00 Power error\x00'
    # )
    # data4 = bytearray(
    #     b"\x05\x001\x00\x95\x02\x00\x00U\x00\xc1Ext.power modem B6\x00o%} \x9c\x02\x00\x00\x00\x00\x00    Power OK\x00 Power error\x00"
    # )

    binary = elgas.parameters.binary.Binary.from_bytes(data1)
    print(binary)


def test_parameter_type_33():

    data1 = bytearray(
        b'\x00\x00\x07\x00"\x00&\x00\x97Base volume Vb\x00} \x95}"}!!m3\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x1a\x00\x00\x00\x02'
    )
    standard_counter = elgas.parameters.standard_counter.StandardCounter.from_bytes(
        data1
    )
    print(standard_counter)


def test_parameter_type_34():
    data1 = bytearray(
        b"\x00\x00\x04\x002\x006\x00\x8bFlow Q\x00  B3} 3}!A} } } m3/h\x00\x00\x00\x00\x9c\x02\x00\x00\x00\x00.\x00\x00\x00\x01"
    )
    flow_rate = elgas.parameters.flow_rate.FlowRate.from_bytes(data1)
    print(flow_rate)


def test_parameter_type_35():
    data1 = bytearray(
        b"\x00\x00\n\x006\x00:\x00\x83Base flow Qb\x00}?}#} }<} m3/h\x00\x00\x00\x00\x00\x002\x00\x00\x00\x01"
    )
    standard_flow_rate = elgas.parameters.flow_rate.StandardFlowRate.from_bytes(data1)
    print(standard_flow_rate)


def test_parameter_type_36():
    data1 = bytearray(
        b"\x00\x00\x05\x00:\x00>\x00\x9bConvers.factor C\x00 A5\x00\x00\x00\x00\x01\x0f\x00\x00HC\x00\x00pA\x00\x00\x80?6\x00\x00\x00\x04"
    )
    conversion_coef = (
        elgas.parameters.conversion_coefficient.ConversionCoefficient.from_bytes(data1)
    )
    print(conversion_coef)


def test_parameter_type_46():

    data1 = bytearray(
        b'\x00\x00\x08\x00*\x00.\x00\x97Spare base vol. Vbs\x000}"m3\x00\x00\x00\x00\x00\x00\x00&\x00"\x00\x00\x00\x02'
    )
    error_standard_counter = (
        elgas.parameters.error_standard_counter.ErrorStandardCounter.from_bytes(data1)
    )
    print(error_standard_counter)


def test_parameter_type_47():
    data1 = bytearray(
        b"\x00\x00\x06\x00>\x00B\x00\x93Comp. ratio Z/Zb K\x00\x00\x81GS\x00:\x00\x00\x00\x04"
    )

    compressibility = elgas.parameters.compressibility.Compressibility.from_bytes(data1)
    print(compressibility)


def test_parameter_type_48():

    data1 = bytearray(
        b"\x01\x00\x1e\x00\x91\x02\x00\x00Q\x00QCall window B2\x00 B2\x002\x00\x95\x02\x01!\x00\xb8V\x00\x00\x00\x00\x00\x00\x04     no call\x00      active\x00"
    )
    # data2 = bytearray(
    #     b"\x02\x00\x1f\x00\x92\x02\x00\x00R\x00IService window B3\x00 B3\x003\x01A\x00\x00\x00\x00\x00\x08Q\x01\x00\x00  no service\x00      active\x00"
    # )

    time_window = elgas.parameters.time_window.TimeWindow.from_bytes(data1)
    print(time_window)


def test_parameter_type_53():

    data1 = bytearray(
        b"\x00\x00\x03\x00\x12\x00\x16\x00\x97Primary volume Vm\x00 } } m3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?} } \x9c\x02\x00\x00\x00\x00\x0e\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00"
    )

    double_counter = elgas.parameters.counter.DoubleCounter.from_bytes(data1)
    print(double_counter)


def test_parameter_type_54():

    data1 = bytearray(
        b"\x00\x00\t\x00\x1a\x00\x1e\x00\x97Spare prim. vol. Vs\x00   m3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x16\x00\x12\x00\x00\x00\x00\x0b\x00\x00\x00"
    )
    double_error_counter = elgas.parameters.error_counter.DoubleErrorCounter.from_bytes(
        data1
    )
    print(double_error_counter)


def test_parameteer_type_59():

    data1 = bytearray(
        b"\x00\x00'\x00J\x00N\x00\xc7Status St1\x00Closed\x00     >\x00*\x00\xffo\xea\xec\xff\x0b\xff\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    )

    diagnostics = elgas.parameters.diagnostics.Diagnostics.from_bytes(data1)
    print(diagnostics)


def test_parameter_type_70():

    data1 = bytearray(
        b'\x00\x004\x00\x96\x02\x00\x00V\x00\xc1Setpoint Q max S1\x00} }  \x00<\x1cF"\x00\x00    Inactive\x00      Active\x00'
    )
    setpoint = elgas.parameters.setpoint.SetPoint.from_bytes(data1)
    print(setpoint)


def test_parameter_type_74():

    data1 = bytearray(
        b"\x00\x00&\x00B\x00F\x00\x91Compressibility Z\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04"
    )
    compress = elgas.parameters.compressibility.CompressibilityZ.from_bytes(data1)
    print(compress)


def test_parameter_type_75():
    data1 = bytearray(
        b"\x00\x00%\x00F\x00J\x00\x91Base compress. Zb\x00ver B\x00\x00\x00\x00\x00\x04"
    )
    compress = elgas.parameters.compressibility.CompressibilityZBase.from_bytes(data1)
    print(compress)


def test_parameter_type_141():

    data1 = bytearray(
        b'\x00\x12\x00\x00\x00\x00\x00\x00\x00\x05ATS0=1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ATD*99***1#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ATH\x00\x00\x00\x00\x00AT+CGDCONT=1,"IP","elvaco.tele2.m2m"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00y\x15Tg4\x81G\x99Bf\x11E\x00y\x15Tg4\x81G\x99Bf\x11E\x00y\x15Tg4\x81G\x00\x00\x00\x00\x00\x00+++\x00\x00\x00\x00\x00y\x15Tg4\x81G\x99B\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    )
    modem = elgas.parameters.modem.Modem.from_bytes(data1)
    print(modem)
